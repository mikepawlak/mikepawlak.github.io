{"version":3,"sources":["logo.svg","components/header.jsx","components/content.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","state","profile","position","socialLinks","name","icon","link","prevState","this","setState","headline","location","className","style","textAlign","map","el","i","key","href","alt","Component","Content","positions","education","volunteerExp","slice","educations","volunteerExperience","title","date1","degree","date2","experience","App","axios","get","then","res","data","err","console","log","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71b2530a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport {\n  FaGithub,\n  FaEnvelope,\n  FaLinkedin,\n  FaStackOverflow,\n} from \"react-icons/fa\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      profile: {},\n      position: \"\",\n      socialLinks: [\n        {\n          name: \"github\",\n          icon: <FaGithub />,\n          link: \"https://github.com/mikepawlak\",\n        },\n        {\n          name: \"linkedin\",\n          icon: <FaLinkedin />,\n          link: \"https://linkedin.com/in/pawlak-mike/\",\n        },\n        {\n          name: \"stackoverflow\",\n          icon: <FaStackOverflow />,\n          link: \"https://stackoverflow.com/users/4869078/mpawlak?tab=profile\",\n        },\n        {\n          name: \"email\",\n          icon: <FaEnvelope />,\n          link: \"mailto:mpawlak719@gmail.com\",\n        },\n      ],\n    };\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.props.profile !== prevState.profile) {\n      this.setState({\n        profile: this.props.profile,\n        position: this.props.profile.profile.headline,\n        location: this.props.profile.profile.location,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <header className=\"header-container\">\n        <div className=\"jumbotron jumbotron-fluid\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col\"></div>\n              <div className=\"col-12 col-md-8 jumbo-content\">\n                <div className=\"jumbo-wrapper\">\n                  <p className=\"lead\" style={{ textAlign: \"left\" }}>\n                    {\" \"}\n                    Hello, my name is\n                  </p>\n                  <h1 className=\"display-4 main-title\"> &#60;Mike&#47;&#62;</h1>\n                  <p className=\"lead\" style={{ textAlign: \"right\" }}>\n                    and I solve problems with code.\n                  </p>\n                </div>\n                <br />\n                <hr className=\"jumbo-break\" />\n                <p className=\"lead\">\n                  I am currently a{\" \"}\n                  <span className=\"emph\">Software Engineer</span> in{\" \"}\n                  <span className=\"emph\">Madison, WI</span>\n                </p>\n                <p className=\"lead\">\n                  {this.state.socialLinks.map((el, i) => (\n                    <a\n                      key={i}\n                      className=\"social-link\"\n                      href={el.link}\n                      alt={el.name}\n                    >\n                      {el.icon}\n                    </a>\n                  ))}\n                </p>\n              </div>\n              <div className=\"col\"></div>\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      profile: {},\n      positions: [],\n      education: [],\n      volunteerExp: []\n    };\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.props.profile !== prevState.profile) {\n      this.setState({\n        profile: this.props.profile,\n        positions: this.props.profile.positions.slice(0, 3),\n        education: this.props.profile.educations,\n        volunteerExp: this.props.profile.volunteerExperience\n      });\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"content-container\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col\"></div>\n            <div className=\"col-12 col-md-8 jumbo-content\">\n              <h2 className=\"resume-header\">Work Experience</h2>\n              <ul className=\"positions\">\n                {this.state.positions.map((el, i) => (\n                  <li className=\"position\" key={i}>\n                    <div>\n                      <h4>{el.title}</h4>\n                      <p>\n                        <em>{el.date1}</em>\n                      </p>\n                      <hr />\n                    </div>\n                  </li>\n                ))}\n              </ul>\n              <h2 className=\"resume-header\">Education</h2>\n              {this.state.education.map((el, i) => (\n                <div key={i} className=\"education-block\">\n                  <h4>{el.title}</h4>\n                  <p>\n                    <b>\n                      <em>{el.degree}</em>\n                    </b>\n                    , {el.date2}\n                  </p>\n                </div>\n              ))}\n              <h2 className=\"resume-header\">Volunteer Experience</h2>\n              {this.state.volunteerExp.map((el, i) => (\n                <div key={i} className=\"education-block\">\n                  <h4>{el.experience}</h4>\n                  <p>\n                    <b>\n                      <em>{el.title}</em>\n                    </b>\n                    , {el.date1}\n                  </p>\n                </div>\n              ))}\n            </div>\n            <div className=\"col\"></div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Content;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./components/header\";\nimport Content from \"./components/content\";\nimport bootstrap from \"bootstrap/dist/css/bootstrap.css\";\nimport axios from \"axios\";\nimport { SSL_OP_LEGACY_SERVER_CONNECT } from \"constants\";\n\nconst API_URL = \"https://api.mikepawlak.com/v1\";\n\nclass App extends Component {\n  state = {\n    profile: {}\n  };\n\n  componentDidMount() {\n    axios\n      .get(`${API_URL}/profile`)\n      .then(res => res.data)\n      .then(\n        data => {\n          this.setState({ profile: data });\n        },\n        err => {\n          console.log(err);\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"bg\"></div>\n        <div className=\"bg bg2\"></div>\n        <div className=\"bg bg3\"></div>\n        <div className=\"App\">\n          <Header profile={this.state.profile} />\n          <Content profile={this.state.profile} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}